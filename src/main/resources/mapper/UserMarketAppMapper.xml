<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.btc123.app.mapper.UserMarketAppMapper" >
  <resultMap id="BaseResultMap" type="com.btc123.app.entity.UserMarketApp" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="sign" property="sign" jdbcType="VARCHAR" />
    <result column="sort" property="sort" jdbcType="BIGINT" />
    <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, token, sign, sort, gmt_create
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from btc123_user_market_app
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from btc123_user_market_app
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.btc123.app.entity.UserMarketApp" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc123_user_market_app (token, sign, sort,
      gmt_create)
    values (#{token,jdbcType=VARCHAR}, #{sign,jdbcType=VARCHAR}, #{sort,jdbcType=BIGINT}, 
      #{gmtCreate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.btc123.app.entity.UserMarketApp" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc123_user_market_app
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="token != null" >
        token,
      </if>
      <if test="sign != null" >
        sign,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="gmtCreate != null" >
        gmt_create,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        #{sign,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=BIGINT},
      </if>
      <if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.btc123.app.entity.UserMarketApp" >
    update btc123_user_market_app
    <set >
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        sign = #{sign,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=BIGINT},
      </if>
      <if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.btc123.app.entity.UserMarketApp" >
    update btc123_user_market_app
    set

      sort = #{sort,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <delete id="deleteUserMarket" parameterType="com.btc123.app.entity.UserMarketApp">
    delete from btc123_user_market_app
    where sign = #{sign,jdbcType=VARCHAR}
    and token = #{token,jdbcType=VARCHAR}
  </delete>

  <select id="selectByToken" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from btc123_user_market_app
    where token = #{token,jdbcType=VARCHAR}
    order by sort
  </select>

  <select id="selectByMaxSort" resultType="java.lang.Long" parameterType="java.lang.String" >
    select
    if(isnull(max(sort)),0,max(sort)) as sort
    from btc123_user_market_app
    where token = #{token,jdbcType=VARCHAR}
  </select>

    <update id="draggingUserMarket" parameterType="java.lang.Long" >
    update btc123_user_market_app AS S1
    JOIN btc123_user_market_app AS S2 ON
    (S1.id= #{idA,jdbcType=BIGINT} AND S2.id = #{idB,jdbcType=BIGINT})
    SET S1.sort = S2.sort,S2.sort = S1.sort;
  </update>

  <select id="selectCountByTokenAndSign" resultType="java.lang.Integer" parameterType="com.btc123.app.entity.UserMarketApp" >
    select count(a.id) from btc123_user_market_app a where a.sign = #{sign,jdbcType=VARCHAR}
    and a.token = #{token,jdbcType=VARCHAR}
  </select>

</mapper>